import requests

url='https://api.github.com/search/repositories?q=language:python&sort=stars'
r = requests.get(url)
print("Status code:", r.status_code)

response_dict = r.json()

print(response_dict.keys())
import requests

url='https://api.github.com/search/repositories?q=language:python&sort=stars'
r = requests.get(url)
print("Status code:", r.status_code)

response_dict = r.json()

print("Total repositories:", response_dict['total_count'])

repo_dicts = response_dict['items']
print("Repositories returned:", len(repo_dicts))

repo_dict = repo_dicts[0]
print("\nKeys:", len(repo_dict))
for key in sorted(repo_dict.keys()):
    print(key)
 
import requests

url='https://api.github.com/search/repositories?q=language:python&sort=stars'
r = requests.get(url)
print("Status code:", r.status_code)

response_dict = r.json()

print("Total repositories:", response_dict['total_count'])

repo_dicts = response_dict['items']
print("Repositories returned:", len(repo_dicts))

repo_dict = repo_dicts[0]

print("\nSelected information about first repository:")
print('Name:', repo_dict['name'])
print('Owner:',repo_dict['owner']['login'])
print('Stars:',repo_dict['stargazers_count'])
print('Repository:',repo_dict['html_url'])
print('Created:',repo_dict['created_at'])
print('Updated:',repo_dict['updated_at'])    
print('Description:',repo_dict['description'])

import requests

url='https://api.github.com/search/repositories?q=language:python&sort=stars'
r = requests.get(url)
print("Status code:", r.status_code)

response_dict = r.json()

print("Total repositories:", response_dict['total_count'])

repo_dicts = response_dict['items']
print("Repositories returned:", len(repo_dicts))

print("\nSelected information about first repository:")
for repo_dict in repo_dicts:
    print('Name:', repo_dict['name'])
    print('Owner:',repo_dict['owner']['login'])
    print('Stars:',repo_dict['stargazers_count'])
    print('Repository:',repo_dict['html_url'])
    print('Description:',repo_dict['description'])
import requests
import pygal
from pygal.style import LightColorizedStyle as LCS, LightenStyle as LS

url='https://api.github.com/search/repositories?q=language:python&sort=stars'
r = requests.get(url)

response_dict = r.json()

repo_dicts = response_dict['items']

names, stars = [], []

for repo_dict in repo_dicts:
    names.append(repo_dict['name'])
    stars.append(repo_dict['stargazers_count'])

my_style = LS('#333366', base_style=LCS)
chart = pygal.Bar(style=my_style, x_label_rotation=45, show_legend=False)
chart.title = 'Most-Starred Python Projects on GitHub'
chart.x_labels = names

chart.add('', stars)
    
chart.render_in_browser()    
#chart.render_to_file('Python_repos1.svg')
import requests
import pygal
from pygal.style import LightColorizedStyle as LCS, LightenStyle as LS

url = 'https://api.github.com/search/repositories?q=language:python&sort=stars'
r = requests.get(url)

response_dict = r.json()

repo_dicts = response_dict['items']

names, stars = [], []
    
for repo_dict in repo_dicts:
    names.append(repo_dict['name'])
    stars.append(repo_dict['stargazers_count'])

my_style = LS('#333366', base_style=LCS)

my_config = pygal.Config()
my_config.x_label_rotation = 45
my_config.show_legend      = False
my_config.title_font_size  = 24
my_config.label_font_size  = 14
my_config.major_label_font_size = 18
my_config.truncate_label   = 15
my_config.show_y_guides    = False
my_config.width            = 1000

chart = pygal.Bar(my_config, style=my_style)
chart.title = 'Most-Starred Python Projects on GitHub'
chart.x_labels = names

chart.add('', stars)

chart.render_to_file('Python_repos2.svg')
import pygal
from pygal.style import LightColorizedStyle as LCS, LightenStyle as LS

my_style = LS('#333366', base_style=LCS)
chart = pygal.Bar(my_style=my_style, x_label_rotation=45, show_legend=False)

chart.title = 'Python Projects'
chart.x_labels = ['httpie','django','flask']

plot_dicts = [ 
	{'value': 16101, 'label': 'Description of httpie.'},
	{'value': 15028, 'label': 'Description of django.'},
	{'value': 14798, 'label': 'Description of flask.'},
	]

chart.add('', plot_dicts)
chart.render_to_file('bar_descriptions.svg')

import requests
import pygal
from pygal.style import LightColorizedStyle as LCS, LightenStyle as LS

url = 'https://api.github.com/search/repositories?q=language:python&sort=stars'
r = requests.get(url)

response_dict = r.json()

repo_dicts = response_dict['items']

names, plot_dicts = [], []
    
for repo_dict in repo_dicts:
    names.append(repo_dict['name'])
    s = str(repo_dict['description'])
    if len(s) > 60: 
        desc = s[:60]
    else:
        desc = s
    
    plot_dict = {
        'value': repo_dict['stargazers_count'],
        'label': desc,
        }
    plot_dicts.append(plot_dict)

my_style = LS('#333366', base_style=LCS)

my_config = pygal.Config()
my_config.x_label_rotation = 45
my_config.show_legend      = False
my_config.title_font_size  = 24
my_config.label_font_size  = 14
my_config.major_label_font_size = 18
my_config.truncate_label   = 15
my_config.show_y_guides    = False
my_config.width            = 1000

chart = pygal.Bar(my_config, style=my_style)
chart.title = 'Most-Starred Python Projects on GitHub'
chart.x_labels = names

chart.add(' ', plot_dicts)

#chart.render_in_browser()
chart.render_to_file('Python_repos3.svg')
for repo_dict in repo_dicts:
    s = str(repo_dict['description'])
    if len(s) > 60: 
        desc = s[:60]
    else:
        desc = s

    plot_dict = {
		'value': repo_dict['stargazers_count'],
		'label': desc,
		'xlink': repo_dict['html_url'],
		}
    plot_dicts.append(plot_dict)
import requests
import pygal
from pygal.style import LightColorizedStyle as LCS, LightenStyle as LS

url = 'https://api.github.com/search/repositories?q=language:python&sort=stars'
r = requests.get(url)

response_dict = r.json()

repo_dicts = response_dict['items']

names, plot_dicts = [], []
    
for repo_dict in repo_dicts:
    names.append(repo_dict['name'])
    s = str(repo_dict['description'])
    if len(s) > 60: 
        desc = s[:60]  #just display max. 60 chars of description
    else:
        desc = s

    plot_dict = {
		'value': repo_dict['stargazers_count'],
		'label': desc,
		'xlink': repo_dict['html_url'],
		}
    plot_dicts.append(plot_dict)

my_style = LS('#333366', base_style=LCS)

my_config = pygal.Config()
my_config.x_label_rotation      = 45
my_config.show_legend           = False
my_config.title_font_size       = 24
my_config.label_font_size       = 14
my_config.major_label_font_size = 18
my_config.truncate_label        = 15
my_config.show_y_guides         = False
my_config.width                 = 1000

chart = pygal.Bar(my_config, style=my_style)
chart.title    = 'Most-Starred Python Projects on GitHub'
chart.x_labels = names
    
chart.add(' ', plot_dicts)

#chart.render_in_browser()
chart.render_to_file('Python_repos.svg')
